// <auto-generated />
using System;
using DigitalSignService.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DigitalSignService.DAL.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DigitalSignService.DAL.Entities.HistorySign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_dateTime");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_userId");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_id");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_name");

                    b.Property<string>("DocumentSignedUrl")
                        .HasColumnType("text")
                        .HasColumnName("document_signed_url");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_url");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<int>("SigningStatus")
                        .HasColumnType("integer")
                        .HasColumnName("signing_status");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_dateTime");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_userId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserSignPositions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("user_sign_positions");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("history_sign", "public");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.PaperSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_dateTime");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_userId");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PaperName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("paper_name");

                    b.Property<int>("PaperSizeType")
                        .HasColumnType("integer")
                        .HasColumnName("paper_size_type");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_dateTime");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_userId");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.ToTable("paper_size", "public");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_dateTime");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_userId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_dateTime");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_userId");

                    b.HasKey("Id");

                    b.ToTable("template", "public");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.TemplatePaper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_dateTime");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_userId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PaperSizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("paper_size_id");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_dateTime");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_userId");

                    b.HasKey("Id");

                    b.HasIndex("PaperSizeId");

                    b.HasIndex("TemplateId");

                    b.ToTable("template_paper", "public");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.TemplatePaperUserSign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_dateTime");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_userId");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("TemplatePaperId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_paper_id");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_dateTime");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_userId");

                    b.Property<string>("UserSignId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_sign_id");

                    b.Property<string>("UserSignPositions")
                        .HasColumnType("jsonb")
                        .HasColumnName("user_sign_positions");

                    b.HasKey("Id");

                    b.HasIndex("TemplatePaperId");

                    b.ToTable("template_paper_user_sign", "public");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.HistorySign", b =>
                {
                    b.HasOne("DigitalSignService.DAL.Entities.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.TemplatePaper", b =>
                {
                    b.HasOne("DigitalSignService.DAL.Entities.PaperSize", "PaperSize")
                        .WithMany("TemplatePapers")
                        .HasForeignKey("PaperSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalSignService.DAL.Entities.Template", "Template")
                        .WithMany("TemplatePapers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaperSize");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.TemplatePaperUserSign", b =>
                {
                    b.HasOne("DigitalSignService.DAL.Entities.TemplatePaper", "TemplatePaper")
                        .WithMany("TemplatePaperUserSigns")
                        .HasForeignKey("TemplatePaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplatePaper");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.PaperSize", b =>
                {
                    b.Navigation("TemplatePapers");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.Template", b =>
                {
                    b.Navigation("TemplatePapers");
                });

            modelBuilder.Entity("DigitalSignService.DAL.Entities.TemplatePaper", b =>
                {
                    b.Navigation("TemplatePaperUserSigns");
                });
#pragma warning restore 612, 618
        }
    }
}
